#!/bin/bash

SRE_SHARED_GROUP="sre"
SRE_MEMBER_NAMES=(
    $( members ${SRE_SHARED_GROUP} )
)
for SRE_NAME in "${SRE_MEMBER_NAMES[@]}"; do
    SRE_MEMBER_IDS+=($( id -u "${SRE_NAME}" ))
done

EXCLUDE_REGEX="(.lock|root|tmux-(0$(printf "|%s" "${SRE_MEMBER_IDS[@]}")))"

# The export is required; otherwise, asciinema will try to upload the
# recording to their servers.
export ASCIINEMA_API_URL='http://127.0.0.1'

inotifywait --quiet --monitor --recursive      \
  --format '%w%f' --exclude "${EXCLUDE_REGEX}" \
  -e create /tmp                               \
  | while read EVENT_PATH; do
    echo "[$(date --rfc-3339=seconds)] new event path: ${EVENT_PATH}"

    if ! echo "${EVENT_PATH}" | grep -qF 'tmux-'; then continue; fi

    if [ ! -S "${EVENT_PATH}" ]; then continue; fi

    PENTEST_TMUX_SOCKET="${EVENT_PATH}"
    PENTEST_TMUX_SESSION="${PENTEST_TMUX_SOCKET##*/}"
    PENTEST_TMUX_USER="$(echo ${PENTEST_TMUX_SESSION} | awk --field-separator '-' '{print $2}')"
    PENTEST_SHARED_GROUP="pentest"
    SRE_TMUX_SESSION="sre-shared-session"

    # Allow SREs to view the socat output coming from the pentester's shell.
    # When the pentester closes their terminal session, this backgrounded
    # tmux session's window will close and clean up after itself.
    echo -n "opening session window: ${PENTEST_TMUX_SESSION},"
    echo -n " with target ${SRE_TMUX_SESSION},"
    echo    " using socket: /tmp/${SRE_TMUX_SESSION}"
    tmux -S /tmp/${SRE_TMUX_SESSION} new-window \
      -n ${PENTEST_TMUX_SESSION}                \
      -t ${SRE_TMUX_SESSION}                    \
      "sudo socat UNIX-CONNECT:\"/tmp/asciinema-recordings/${PENTEST_TMUX_SESSION}.cast\" STDOUT" \
      &
done
